Title: Writeup for Project 1, Summer 2014
Date: 06/06/2014
Group: Name			    Email				    StudentID
	Sam Chordas		    chordas@usc.edu			2652701844
	Richard Chan		chanrich@usc.edu		4260581367
	Nikhil Handyal		handyal@usc.edu			9150083772

I. Requirements:
	Part 1: 
	The first part of this project was to implement the following functions as system calls in the operating system: 
		Exit(), Yield(), Acquire(), Release(), Wait(), Signal(), Broadcast(), CreateLock(), DestroyLock(), CreateCondition(), DestroyCondition().
	Exit must ensure that Thread:Finish() is called on the exiting threads excluding the last thread on nachos on which we must call interrupt->Halt() on to stop nachos.

	Acquire() and Release() are the lock functions that will be called on locks in the user program. 

	Wait(), Signal(), and Broadcast() are the conditions functions that will be called on conditions in the user program.

	CreateLock(), DestroyLock(), CreateCondition(), and DestroyCondition(). The create functions can take no parameter or take a name, they must return an integer value which will be an index position into a kernel structure array of actual Locck and Condition objects.
	The destroy functions take a single integer parameter - the identifier for the Lock or Condition kernel object that is to be deleted.

	A user program should not be able to crash the operationg system.

	Part 2:
	Implement multiprogramming.

	Implement a way of allocating physical memory frames so that multiple programs can be loaded into memory at once.

	Implement a way of copying data to/from the kernel from/to the user's virtual address space.

	Create the Fork and Exec system calls. Fork and Exec must be constructed in such a way that they cannot break the OS. 

	Part 3:
	Implement both parts of Project 1 as a nachos user program using the Lock and Condition system calls created in part 1 for sychronization, the Fork system call created in part 2 to create threads, the Exec system call created in part 2 to run multiple hospital simulations simultaneously.

II. Assumptions:

III. Design:

IV. Implementation:
	Files modified:
	start.s, exception.cc, syscall.h, progtest.cc, 
	addrspace.h, addrspace.cc, filesys.h, openfile.h, translate.h, translate.cc, machine.h, machine.cc

	Files added:
	In nachos:
	sychronization_lut.h, synchronization_lut.cc
	In docs/:
	fork.txt

	Data Structures added:
	synchronization_lut.h/.cc

	Functions added:
	exception.cc:
	int Exit_Syscall(int status);
	int exec_syscall(unsigned int vaddr, int size);
	void exec_kernel_function(int i);
	int Fork_Syscall(void (*func), unsigned int vaddr);
	void kernel_thread(int value);
	void print_f_syscall(unsigned int vaddr, int length);
	int condition_delete_syscall(int condition_index);
	int condition_broadcast_syscall(int condition_index, 
		int lock_index);
	int condition_signal_syscall(int condition_index, 
		int lock_index);
	int condition_wait_syscall(int condition_index, 
		int lock_index);
	int condition_create_syscall(unsigned int vaddr, 
		int length);
	int lock_delete_syscall(int lock_index);
	int lock_release_syscall(int lock_index);
	int lock_acquire_syscall(int lock_index) {
	int lock_create_syscall(unsigned int vaddr, int length);
	void Yield_Syscall();
	void Close_Syscall(int fd);

	syscall.h:
	void Exit(int status);
	SpaceId Exec(char *name ,int size);
	int Fork(void (*func), char* name, 
		int name_buffer_size);
	void Yield();
	int Lock_Create(char* name_buffer, 
		int name_buffer_size);
	int Lock_Acquire(int lock_index);
	int Lock_Release(int lock_index);
	int Lock_Delete(int lock_index);

	addrspace.h/.cc:
	int newStack();
	void removeStack(int stack);

	synchronization_lut.h/.cc:
	int lock_create(char*);
    int lock_acquire(int);
    int lock_release(int);
    int lock_delete(int);
    int condition_create(char*);
    int condition_wait(int, int);
    int condition_signal(int, int);
    int condition_broadcast(int, int);
    int condition_delete(int);
    bool attempt_lock_delete(int);
    bool attempt_condition_delete(int);

    bool validate_lock_request(int);
    bool validate_condition_request(int);

V. Testing:

VI. Discussion:

VII. Miscellaneous:
