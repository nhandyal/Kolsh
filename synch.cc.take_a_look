// synch.cc 
//	Routines for synchronizing threads.  Three kinds of
//	synchronization routines are defined here: semaphores, locks 
//   	and condition variables (the implementation of the last two
//	are left to the reader).
//
// Any implementation of a synchronization routine needs some
// primitive atomic operation.  We assume Nachos is running on
// a uniprocessor, and thus atomicity can be provided by
// turning off interrupts.  While interrupts are disabled, no
// context switch can occur, and thus the current thread is guaranteed
// to hold the CPU throughout, until interrupts are reenabled.
//
// Because some of these routines might be called with interrupts
// already disabled (Semaphore::V for one), instead of turning
// on interrupts at the end of the atomic operation, we always simply
// re-set the interrupt state back to its original value (whether
// that be disabled or enabled).
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "synch.h"
#include "system.h"

//----------------------------------------------------------------------
// Semaphore::Semaphore
// 	Initialize a semaphore, so that it can be used for synchronization.
//
//	"debugName" is an arbitrary name, useful for debugging.
//	"initialValue" is the initial value of the semaphore.
//----------------------------------------------------------------------

Semaphore::Semaphore(char* debugName, int initialValue)
{
    name = debugName;
    value = initialValue;
    queue = new List;
}

//----------------------------------------------------------------------
// Semaphore::Semaphore
// 	De-allocate semaphore, when no longer needed.  Assume no one
//	is still waiting on the semaphore!
//----------------------------------------------------------------------

Semaphore::~Semaphore()
{
    delete queue;
}

//----------------------------------------------------------------------
// Semaphore::P
// 	Wait until semaphore value > 0, then decrement.  Checking the
//	value and decrementing must be done atomically, so we
//	need to disable interrupts before checking the value.
//
//	Note that Thread::Sleep assumes that interrupts are disabled
//	when it is called.
//----------------------------------------------------------------------

void
Semaphore::P()
{
    IntStatus oldLevel = interrupt->SetLevel(IntOff);	// disable interrupts
    
    while (value == 0) { 			// semaphore not available
	queue->Append((void *)currentThread);	// so go to sleep
	currentThread->Sleep();
    } 
    value--; 					// semaphore available, 
						// consume its value
    
    (void) interrupt->SetLevel(oldLevel);	// re-enable interrupts
}

//----------------------------------------------------------------------
// Semaphore::V
// 	Increment semaphore value, waking up a waiter if necessary.
//	As with P(), this operation must be atomic, so we need to disable
//	interrupts.  Scheduler::ReadyToRun() assumes that threads
//	are disabled when it is called.
//----------------------------------------------------------------------

void
Semaphore::V()
{
    Thread *thread;
    IntStatus oldLevel = interrupt->SetLevel(IntOff);

    thread = (Thread *)queue->Remove();
    if (thread != NULL)	   // make thread ready, consuming the V immediately
	scheduler->ReadyToRun(thread);
    value++;
    (void) interrupt->SetLevel(oldLevel);
}

// Dummy functions -- so we can compile our later assignments 
// Note -- without a correct implementation of Condition::Wait(), 
// the test case in the network assignment won't work!



Lock::Lock(char* debugName) {
	name = debugName;
	LockBusy = True;
}

Lock::~Lock() {
	
}

bool Lock::isHeldByCurrentThread(){
	return (LockOwner == currentThread);
}

void Lock::Acquire() {
	IntStatus oldLevel = interrupt->SetLevel(IntOff);
	
	if(LockOwner == currentThread){
		(void) interrupt->SetLevel(oldLevel);
		return;
	}
	//if Lock is available
	if(LockBusy == False){
		LockBusy = True;
		LockOwner = currentThread;
	}
	else {//Lock is not available
		scheduler->ReadyToRun(currentThread);
		currentThread->Sleep();
	}
	(void) interrupt->SetLevel(oldLevel);
}

void Lock::Release() {
	IntStatus oldLevel = interrupt->SetLevel(IntOff);
	Thread* nextThread;
	//If not the lock owner, restore interrupt
	if(!isHeldByCurrentThread()){ 
		cout << "Not Lock Owner" << endl;
		(void) interrupt->SetLevel(oldLevel); 
		return;
	}
	
	//Check if there is a thread in the wait queue, 
	nextThread = scheduler->FindNextToRun(); //Remove from ready list
	if (nextThread != NULL){
		scheduler->ReadyToRun(nextThread);
		LockOwner = nextThread;
	}
	else{
		//No thread in wait queue
		LockBusy = False;
		LockOwner = NULL;
	}
	(void) interrupt->SetLevel(oldLevel);
}

//Condition Variables
Condition::Condition(char* debugName) { 
	name = debugName;
	WaitingLock = NULL;
	WaitQueue = new deque<Thread*>;
}

Condition::~Condition() { }

void Condition::Wait(Lock* conditionLock) {
	//ASSERT(FALSE);
	IntStatus oldLevel = interrupt->SetLevel(IntOff);
	if (conditionLock == NULL){
		cout << "Condition Lock is empty" << endl;
		(void) interrupt->SetLevel(oldLevel); 
		return;
	}
	
	if(WaitingLock == NULL){
		WaitingLock = conditionLock;
	}
	
	if(WaitingLock != conditionLock){
		cout << "Waiting Lock is not current Lock" << endl;
		(void) interrupt->SetLevel(oldLevel); 
		return;
	}
	//Push the Thread into CV's wait queue and release the lock, put the thread to sleep
	WaitQueue->push_back(currentThread);
	conditionLock->Release();
	currentThread->Sleep();
	//When the thread is signalled
	conditionLock->Acquire();
	(void) interrupt->SetLevel(oldLevel); 
}
void Condition::Signal(Lock* conditionLock) {
	IntStatus oldLevel = interrupt->SetLevel(IntOff);
	
	//Check if there is any thread waiting, if no waiters, restore interrupt and return
	if( WaitQueue->empty() ){
		(void) interrupt->SetLevel(oldLevel); 
		return;
	}
	
	//Remove from CV wait queue and put the Thread in waitingQueue on the Ready Queue
	Thread* nextThread = WaitQueue->pop_front();
	scheduler->ReadyToRun(nextThread);
	
	if(WaitQueue->empty()){
		WaitingLock = NULL;
	}
	(void) interrupt->SetLevel(oldLevel); 
	}
	
void Condition::Broadcast(Lock* conditionLock) {
	//If CV's wait queue not empty, remove one and Signal it
	while( !(WaitQueue->empty()) ){
		Signal(WaitQueue->pop_front());
	}
}
